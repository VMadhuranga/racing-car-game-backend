// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: leader-board.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addUserToLeaderBoard = `-- name: AddUserToLeaderBoard :exec
INSERT INTO leader_board (id, best_time, user_id)
VALUES ($1, $2, $3)
`

type AddUserToLeaderBoardParams struct {
	ID       uuid.UUID
	BestTime string
	UserID   uuid.UUID
}

func (q *Queries) AddUserToLeaderBoard(ctx context.Context, arg AddUserToLeaderBoardParams) error {
	_, err := q.db.ExecContext(ctx, addUserToLeaderBoard, arg.ID, arg.BestTime, arg.UserID)
	return err
}

const getLeaderBoard = `-- name: GetLeaderBoard :many
SELECT l.id, l.best_time, u.username
FROM leader_board l
JOIN users u ON l.user_id = u.id
ORDER BY l.best_time
`

type GetLeaderBoardRow struct {
	ID       uuid.UUID
	BestTime string
	Username string
}

func (q *Queries) GetLeaderBoard(ctx context.Context) ([]GetLeaderBoardRow, error) {
	rows, err := q.db.QueryContext(ctx, getLeaderBoard)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLeaderBoardRow
	for rows.Next() {
		var i GetLeaderBoardRow
		if err := rows.Scan(&i.ID, &i.BestTime, &i.Username); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserBestTimeByUserId = `-- name: UpdateUserBestTimeByUserId :exec
UPDATE leader_board SET best_time = $1 WHERE user_id = $2
`

type UpdateUserBestTimeByUserIdParams struct {
	BestTime string
	UserID   uuid.UUID
}

func (q *Queries) UpdateUserBestTimeByUserId(ctx context.Context, arg UpdateUserBestTimeByUserIdParams) error {
	_, err := q.db.ExecContext(ctx, updateUserBestTimeByUserId, arg.BestTime, arg.UserID)
	return err
}
